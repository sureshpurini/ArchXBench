Design Name: shift_add_mult_parallel
Module Name: shift_add_mult

Inputs:
- clk                           // Clock signal
- rst                           // Synchronous reset
- start                         // Start multiplication
- A[WIDTH-1:0]                  // Operand A (multiplicand)
- B[WIDTH-1:0]                  // Operand B (multiplier)
- valid_in                      // Input valid
- signed_mode                   // 0: unsigned, 1: signed multiplication

Outputs:
- result[2*WIDTH-1:0]           // Output product
- valid_out                     // Output valid
- done                          // Multiplication complete
- busy                          // Multiplier is processing

Parameters:
- WIDTH = 16                    // Operand width (8, 16, 32, etc.)
- PARALLEL_OPS = 4              // Number of parallel shift-add operations per cycle (1, 2, 4, 8, etc.)
- SIGNED = 1                    // Enable signed operation by default

Derived Parameters:
- NUM_CYCLES = WIDTH/PARALLEL_OPS  // Number of cycles required for multiplication
- ACCUMULATOR_WIDTH = 2*WIDTH      // Width of the accumulator

Design Signature:

module shift_add_mult #(
    parameter WIDTH = 16,
    parameter PARALLEL_OPS = 4,
    parameter SIGNED = 1
) (
    input clk,
    input rst,
    input start,
    input valid_in,
    input [WIDTH-1:0] A,
    input [WIDTH-1:0] B,
    input signed_mode,
    output reg [2*WIDTH-1:0] result,
    output reg valid_out,
    output reg done,
    output reg busy
);

Design Notes:
- PARALLEL_OPS must be a power of 2 and divide WIDTH evenly
- Higher PARALLEL_OPS values increase area but reduce latency
- PARALLEL_OPS = 1 gives serial operation (minimum area)
- PARALLEL_OPS = WIDTH gives fully parallel operation (minimum latency)