Title: Non-Restoring Integer Divider

Objective:
Design a hardware module that performs **unsigned integer division** using the **non-restoring division algorithm**. Given a dividend `A` and divisor `B`, the module should iteratively compute the **quotient** and **remainder** over multiple cycles without requiring restoring steps, by tracking the sign of the partial remainder.

Background:
Unlike restoring division, the non-restoring algorithm avoids "undoing" subtractions by **adjusting the operation on the next cycle** based on the sign of the current remainder:
- If remainder is **positive**, subtract divisor
- If remainder is **negative**, add divisor
- Shift quotient left, inserting `1` if result â‰¥ 0, otherwise `0`

This allows the division loop to proceed without additional restore steps, improving efficiency in sequential arithmetic units.

Design Constraints:
- Operands: two `N`-bit unsigned integers (`dividend`, `divisor`)
- Outputs: `N`-bit quotient and `N`-bit remainder
- Use internal registers for remainder, quotient, and control
- Perform 1 iteration per cycle, for `N` total cycles
- Use FSM to control datapath and iterations

Performance Expectation:
Latency = N cycles  
Throughput = 1 result per N cycles  
Improved performance over restoring division in FSM complexity

Deliverables:
- Verilog implementation of non-restoring divider (unsigned)
