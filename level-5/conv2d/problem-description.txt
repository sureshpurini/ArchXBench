Title: 2D Convolution (e.g., Gaussian Blur / Sobel) — Streaming Stencil Pipeline

Objective:
Design a parameterizable streaming hardware accelerator to perform 2-D convolution on raster-ordered (row major ordered) image streams. The engine must support fixed or programmable kernels such as 3×3 or 5×5 Gaussian, Sobel, or Laplacian filters. It should sustain one pixel per clock after the line-buffer pipeline is filled.

Background:
2-D convolution underpins image-processing tasks like blurring, sharpening, edge detection, and feature extraction. Hardware implementations exploit spatial locality by buffering complete image rows, creating a sliding 2-D stencil window that feeds a parallel multiply-accumulate unit every cycle.

Design Constraints:
- Input: serial 2-D image stream (pixels arrive in row major order).
- Kernel: fixed or programmable; odd dimensions 3×3 – 7×7.
- Arithmetic: fixed-point (configurable width) with optional floating-point mode.
- Throughput: 1 pixel/clock after pipeline fill.
- Edge handling: selectable zero-padding, replicate-padding, or mirror-padding.
- Requires `(KERNEL_SIZE-1)` line buffers plus a pixel shift register to build the window.
- Image width parameter determines buffer length; height may be unbounded in stream mode.

Performance Expectation:
Once the first `(KERNEL_SIZE-1)/2` lines and `(KERNEL_SIZE-1)/2` columns have been buffered, the accelerator emits one filtered pixel each clock. Overall latency equals the window-fill time plus internal MAC pipeline depth.

Deliverables:
- Verilog (or HLS) implementation of the conv2d module, including line-buffer generator.
- Parameterizable dot-product datapath supporting runtime coefficient loading.
