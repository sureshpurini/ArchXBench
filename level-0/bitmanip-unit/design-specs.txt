Design Name:
- bit_manip_unit

Module Name:
- bit_manip_unit

Inputs:
- data [N-1:0]: The primary input data word to be manipulated.
- data2 [N-1:0]: A secondary input used for operations such as pack (combining two data words).
- op_code [1:0]: Operation selection signal that specifies the desired function:
    - 00: Rotate
    - 01: Mask
    - 10: Pack
    - 11: Unpack
- shift_amt [M-1:0]: For the rotate operation, this signal specifies the number of positions by which the data should be rotated.
- mask_val [N-1:0]: For the mask operation, this signal provides the bit mask to be applied to the input data.

Outputs:
- out [n-1:0]: The output resulting from the selected bit manipulation operation.
- out2 [n-1:0]: (Used in unpack mode) The secondary output providing additional data when the input word is split into two fields.

Design Signature:
module bit_manip_unit(
    input [N-1:0] data,
    input [N-1:0] data2,
    input [1:0] op_code,     // 00: rotate, 01: mask, 10: pack, 11: unpack
    input [M-1:0] shift_amt, // For rotate operation
    input [N-1:0] mask_val,  // For mask operation
    output reg [N-1:0] out,
    output reg [N-1:0] out2 // Valid only when performing unpack
);

Design Notes:
- The module should be fully parameterized to allow adjustment of the main data width (N) and the required bit-width for rotation control (M).
- For the rotate operation, implement a mechanism to support both left and right rotations (if desired) based on additional control bits or design conventions.
- The masking function should perform a bitwise AND between the input data and the mask_val.
- The pack operation is expected to combine the lower portions of 'data' and 'data2' into a single word; design the input widths or packing scheme to ensure proper placement of each field.
- The unpack operation should split the input 'data' into two separate outputs, 'out' and 'out2', following a predefined bit partition (e.g., equal halves or based on specific bit boundaries).
- Care should be taken to optimize the design for minimal propagation delay, ensuring that all bit manipulation functions meet timing requirements while minimizing area and power overhead.
