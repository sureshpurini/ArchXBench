Design Name: demux_1to4
Module Name:
- demux_1to4

Inputs:
- in      // 1-bit data input
- sel     // 2-bit select input

Outputs:
- out0    // Active when sel = 2'b00
- out1    // Active when sel = 2'b01
- out2    // Active when sel = 2'b10
- out3    // Active when sel = 2'b11

Design Signature:

// 1-to-4 Demultiplexer using demux_1to2 instances
module demux_1to4 (
    input        in,
    input  [1:0] sel,
    output       out0,
    output       out1,
    output       out2,
    output       out3
);

Design Notes:
- Implement with three structural instances of demux_1to2:
    1. **Stage 1**: split `in` into two intermediate signals based on `sel[1]`  
       `demux_1to2 u0 (.in(in),     .sel(sel[1]), .out0(i_low), .out1(i_high));`
    2. **Stage 2**: feed each intermediate into a second-level demux using `sel[0]`  
       `demux_1to2 u1 (.in(i_low),  .sel(sel[0]), .out0(out0),  .out1(out1));`  
       `demux_1to2 u2 (.in(i_high), .sel(sel[0]), .out0(out2),  .out1(out3));`
- Do **not** use behavioral constructs (`assign`, `case`, etc.); rely solely on structural composition.
- Use clear, named port mappings and instance labels (e.g., u0, u1, u2).
